//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryApp.ServiceCurrencyCalculator {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Currency", Namespace="http://schemas.datacontract.org/2004/07/DataBase.Db.DbCurrencies.Models")]
    [System.SerializableAttribute()]
    public partial class Currency : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceCurrencyCalculator.IServiceCurrencyCalculator")]
    public interface IServiceCurrencyCalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencyCodes", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencyCodesResponse")]
        string[] GetCurrencyCodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencyCodes", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencyCodesResponse")]
        System.Threading.Tasks.Task<string[]> GetCurrencyCodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencyByCode", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencyByCodeResponse")]
        LibraryApp.ServiceCurrencyCalculator.Currency GetCurrencyByCode(string currencyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencyByCode", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencyByCodeResponse")]
        System.Threading.Tasks.Task<LibraryApp.ServiceCurrencyCalculator.Currency> GetCurrencyByCodeAsync(string currencyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencies", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/GetCurrenciesResponse")]
        LibraryApp.ServiceCurrencyCalculator.Currency[] GetCurrencies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/GetCurrencies", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/GetCurrenciesResponse")]
        System.Threading.Tasks.Task<LibraryApp.ServiceCurrencyCalculator.Currency[]> GetCurrenciesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/CalculateCurrencyValue", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/CalculateCurrencyValueResponse")]
        float CalculateCurrencyValue(float value, string fromCode, string toCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/CalculateCurrencyValue", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/CalculateCurrencyValueResponse")]
        System.Threading.Tasks.Task<float> CalculateCurrencyValueAsync(float value, string fromCode, string toCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/CalculateCurrenciesValues", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/CalculateCurrenciesValuesResponse")]
        float[] CalculateCurrenciesValues(float[] values, string fromCode, string toCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCurrencyCalculator/CalculateCurrenciesValues", ReplyAction="http://tempuri.org/IServiceCurrencyCalculator/CalculateCurrenciesValuesResponse")]
        System.Threading.Tasks.Task<float[]> CalculateCurrenciesValuesAsync(float[] values, string fromCode, string toCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCurrencyCalculatorChannel : LibraryApp.ServiceCurrencyCalculator.IServiceCurrencyCalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceCurrencyCalculatorClient : System.ServiceModel.ClientBase<LibraryApp.ServiceCurrencyCalculator.IServiceCurrencyCalculator>, LibraryApp.ServiceCurrencyCalculator.IServiceCurrencyCalculator {
        
        public ServiceCurrencyCalculatorClient() {
        }
        
        public ServiceCurrencyCalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceCurrencyCalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceCurrencyCalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceCurrencyCalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetCurrencyCodes() {
            return base.Channel.GetCurrencyCodes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCurrencyCodesAsync() {
            return base.Channel.GetCurrencyCodesAsync();
        }
        
        public LibraryApp.ServiceCurrencyCalculator.Currency GetCurrencyByCode(string currencyCode) {
            return base.Channel.GetCurrencyByCode(currencyCode);
        }
        
        public System.Threading.Tasks.Task<LibraryApp.ServiceCurrencyCalculator.Currency> GetCurrencyByCodeAsync(string currencyCode) {
            return base.Channel.GetCurrencyByCodeAsync(currencyCode);
        }
        
        public LibraryApp.ServiceCurrencyCalculator.Currency[] GetCurrencies() {
            return base.Channel.GetCurrencies();
        }
        
        public System.Threading.Tasks.Task<LibraryApp.ServiceCurrencyCalculator.Currency[]> GetCurrenciesAsync() {
            return base.Channel.GetCurrenciesAsync();
        }
        
        public float CalculateCurrencyValue(float value, string fromCode, string toCode) {
            return base.Channel.CalculateCurrencyValue(value, fromCode, toCode);
        }
        
        public System.Threading.Tasks.Task<float> CalculateCurrencyValueAsync(float value, string fromCode, string toCode) {
            return base.Channel.CalculateCurrencyValueAsync(value, fromCode, toCode);
        }
        
        public float[] CalculateCurrenciesValues(float[] values, string fromCode, string toCode) {
            return base.Channel.CalculateCurrenciesValues(values, fromCode, toCode);
        }
        
        public System.Threading.Tasks.Task<float[]> CalculateCurrenciesValuesAsync(float[] values, string fromCode, string toCode) {
            return base.Channel.CalculateCurrenciesValuesAsync(values, fromCode, toCode);
        }
    }
}
