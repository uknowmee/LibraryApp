//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryApp.ServiceRegister {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DataBase.Db.DbUsers.Models")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SaltField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserPasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salt {
            get {
                return this.SaltField;
            }
            set {
                if ((object.ReferenceEquals(this.SaltField, value) != true)) {
                    this.SaltField = value;
                    this.RaisePropertyChanged("Salt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserPassword {
            get {
                return this.UserPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.UserPasswordField, value) != true)) {
                    this.UserPasswordField = value;
                    this.RaisePropertyChanged("UserPassword");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRegister.IServiceRegister")]
    public interface IServiceRegister {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRegister/Check", ReplyAction="http://tempuri.org/IServiceRegister/CheckResponse")]
        bool Check(string userName, string password1, string password2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRegister/Check", ReplyAction="http://tempuri.org/IServiceRegister/CheckResponse")]
        System.Threading.Tasks.Task<bool> CheckAsync(string userName, string password1, string password2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRegister/Apply", ReplyAction="http://tempuri.org/IServiceRegister/ApplyResponse")]
        LibraryApp.ServiceRegister.User Apply(string userName, string password1, string password2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRegister/Apply", ReplyAction="http://tempuri.org/IServiceRegister/ApplyResponse")]
        System.Threading.Tasks.Task<LibraryApp.ServiceRegister.User> ApplyAsync(string userName, string password1, string password2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceRegisterChannel : LibraryApp.ServiceRegister.IServiceRegister, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceRegisterClient : System.ServiceModel.ClientBase<LibraryApp.ServiceRegister.IServiceRegister>, LibraryApp.ServiceRegister.IServiceRegister {
        
        public ServiceRegisterClient() {
        }
        
        public ServiceRegisterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceRegisterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRegisterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRegisterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Check(string userName, string password1, string password2) {
            return base.Channel.Check(userName, password1, password2);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAsync(string userName, string password1, string password2) {
            return base.Channel.CheckAsync(userName, password1, password2);
        }
        
        public LibraryApp.ServiceRegister.User Apply(string userName, string password1, string password2) {
            return base.Channel.Apply(userName, password1, password2);
        }
        
        public System.Threading.Tasks.Task<LibraryApp.ServiceRegister.User> ApplyAsync(string userName, string password1, string password2) {
            return base.Channel.ApplyAsync(userName, password1, password2);
        }
    }
}
